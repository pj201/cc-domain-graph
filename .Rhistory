install.packages("igraph")
library(igraph)
install.packages("shiny")
shiny::runApp('Blog/aws/201511wikisne/wikisne')
install.packages("shinyBS")
shiny::runApp('Blog/aws/201511wikisne/wikisne')
install.packages("wordcloud")
shiny::runApp('Blog/aws/201511wikisne/wikisne')
install.packages("tm")
6.27/9
library(ElemStatLearn)
summary(zip.train)
zip.sym <- zip.train[,1]
install.packages("ElemStatLearn")
library(ElemStatLearn)
summary(zip.train)
zip.sym <- zip.train[,1]
zip.sym
zip.test
library(randomForest)
install.packages("randomForest")
library(randomForest)
zip.rf = randomForest(
zip.class ~ . - V1,
data=zip,
xtest=zip.test[,2:257],
ytest=factor(zip.test.class),
ntree=500,
type="class"
)
zip.rf = randomForest(
V1 ~ . - V1,
data=zip.train,
xtest=zip.test[,2:257],
ytest=factor(zip.test[,1]),
ntree=500,
type="class"
)
?randomForest
zip.rf = randomForest(
V1 ~ . - V1,
data=zip.train,
#xtest=zip.test[,2:257],
#ytest=factor(zip.test[,1]),
ntree=500,
type="class"
)
print(zip.rf)
zip.rf = randomForest(
x ~ zip.train[,2:257],
y ~ factor(zip.train[,1]),
xtest=zip.test[,2:257],
ytest=factor(zip.test[,1]),
ntree=500,
type="class"
)
zip.rf = randomForest(
x=zip.train[,2:257],
y=factor(zip.train[,1]),
xtest=zip.test[,2:257],
ytest=factor(zip.test[,1]),
ntree=500,
type="class"
)
print(zip.rf)
?zip.rf
zip.rf.predict
predict.randomForest(xtest)
xtest <- zip.test[,2:257]
predict.randomForest(xtest)
predict(xtest)
xtest <- data.frame(zip.test[,2:257])
predict(xtest)
predict(zip.rf, newdata=xtest)
xtest <- data.frame(zip.test[,2:257])
predict(zip.rf, newdata=xtest)
str(zip.rf)
zip.rf$votes
zip.rf$votes[1,]
zip.test[1,]
dim(zip.test)
i <- sample(nrow(zip.test))
i
i <- sample(nrow(zip.test), 1)
sample(nrow(zip.test), 1)
sample(nrow(zip.test), 1)
sample(nrow(zip.test), 1)
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$votes[i,]
dim(zip.rf$votes)
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
i <- sample(nrow(zip.train), 1); zip.train[i,1]; zip.rf$votes[i,]
str(zip.rf)
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$test$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$test$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$test$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$test$votes[i,]
i <- sample(nrow(zip.test), 1); zip.test[i,1]; zip.rf$test$votes[i,]
meshsize <- 0.05
arr <- rep(0, 1/meshsize)
arr
zip.rf$test$votes[i,]
zip.rf$test$votes[i,][2]
as.numeric(zip.rf$test$votes[i,][2])
as.numeric(zip.rf$test$votes[i,])
0.968/meshsize
floor(0.968/meshsize)
ceiling(0.968/meshsize)
str(zip.rf)
zip.rf$test$predicted[i]
i=1
j=1
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
idx
zip.rf$test$predicted[i] == idx
meshsize <- 0.05
len <- 1/meshsize
arr.num <- rep(0, len) # counts correct predictions
arr.den <- rep(0, len) # counts all predictions
for(i in 1:nrow(zip.test)){
for(j in 1:len){
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
arr.den[idx] <- arr.den[idx] + 1
if(zip.rf$test$predicted[i] == idx) arr.num[idx] <- arr.num[idx] + 1
}
}
zip.rf$test$votes
dim(zip.rf$test$votes)
len
arr.num <- rep(0, len) # counts correct predictions
arr.den <- rep(0, len) # counts all predictions
for(i in 1:nrow(zip.test)){
for(j in 1:10){
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
arr.den[idx] <- arr.den[idx] + 1
if(zip.rf$test$predicted[i] == idx) arr.num[idx] <- arr.num[idx] + 1
}
}
arr.num
arr.den
calib <- arr.num/arr.den
plot(calib)
calib
arr.num <- rep(0, len) # counts correct predictions
arr.den <- rep(0, len) # counts all predictions
for(i in 1:nrow(zip.test)){
for(j in 1:10){
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
arr.den[idx] <- arr.den[idx] + 1
if(zip.rf$test$predicted[i] == j) arr.num[idx] <- arr.num[idx] + 1
}
}
calib <- arr.num/arr.den
plot(calib)
arr.num
prob <- as.numeric(zip.rf$test$votes[i,j])
prob
idx <- ceiling(prob/meshsize)
zip.rf$test$predicted[i]
j
arr.num <- rep(0, len) # counts correct predictions
arr.den <- rep(0, len) # counts all predictions
for(i in 1:nrow(zip.test)){
for(j in 1:10){
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
arr.den[idx] <- arr.den[idx] + 1
if(zip.rf$test$predicted[i] == j-1) arr.num[idx] <- arr.num[idx] + 1
}
}
calib <- arr.num/arr.den
plot(calib)
xax <- 1:len / meshsize
xax
xax <- (1:len) / len
plot(calib ~ xax, type='b', col='blue', frame.plot=0)
plot(calib ~ xax,
xlab="Probability estimate",
ylab="Observed probability",
type='b', col='blue', frame.plot=0)
generate.data <- function(n, sigma1, sigma2, prob){
y <- factor(sample(2, n, prob=c(prob, 1-prob), replace=TRUE))
f <- function(z){ if(z==1) rnorm(1, mu1, sigma1) else rnorm(1, mu2, sigma2)}
x <- sapply(y, f)
#y1 <- factor(as.integer(y==1))
#y2 <- factor(as.integer(y==2))
data.frame(x, y)
}
generate.roc <- function(dat.train, dat.test, nbins=100){
# fit model:
model <- glm(y ~ ., family=binomial(link='logit'), data=dat.train)
pred <- predict(model, newdata=dat.test)
# ROC curve:
mn <- min(pred)
mx <- max(pred)
thresh <- seq(mn, mx, (mx-mn)/nbins)
f <- function(theta){
pred <- (pred<theta)
tp <- (dat.test$y==1)
tpr <- sum(pred[tp])/length(pred[tp])
tn <- (dat.test$y==2)
fpr <- sum(pred[tn])/length(pred[tn])
list(fpr=fpr, tpr=tpr)
}
roc <- t(sapply(thresh, f))
# return:
list(pred=pred, roc=roc)
}
generate.roc.set <- function(nexpts, dat.train, dat.test, nbins=100){
out <- matrix(ncol=3, nrow=0)
for(i in 1:nexpts){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
roc <- generate.roc(dat.train, dat.test, nbins=nbins)$roc
roc <- cbind(roc, rep(i, nrow(roc)))
out <- rbind(out, roc)
}
# return:
fpr <- do.call(c, out[,1])
tpr <- do.call(c, out[,2])
idx <- do.call(c, out[,3])
data.frame(fpr, tpr, idx)
}
addTrans <- function(color,trans)
{
# This function adds transparancy to a color.
# Define transparancy with an integer between 0 and 255
# 0 being fully transparant and 255 being fully visable
# Works with either color and trans a vector of equal length,
# or one of the two of length 1.
if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))
num2hex <- function(x)
{
hex <- unlist(strsplit("0123456789ABCDEF",split=""))
return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))
}
rgb <- rbind(col2rgb(color),trans)
res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
return(res)
}
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1.2
prob <- 0.2
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(1:nbins)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:nbins)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1
prob <- 0.3
n.train <- 300
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
plot(model$roc, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
for(i in 1:100){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
model <- generate.roc(dat.train, dat.test)
#table(model$pred, dat.test$y)
points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1.2
prob <- 0.3
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
plot(model$roc, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
for(i in 1:100){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
model <- generate.roc(dat.train, dat.test)
#table(model$pred, dat.test$y)
points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
resolution <- 30
nsamples <- 100
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1.2
sigma2 <- 1.5
prob <- 0.3
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
#plot(model$roc, type='n', frame.plot=0,
#     xlab="False positive rate",
#     ylab="True positive rate")
#segments(0,0,1,1, col='grey')
#for(i in 1:100){
#  dat.train <- generate.data(n.train, sigma1, sigma2, prob)
#  dat.test <- generate.data(n.test, sigma1, sigma2, prob)
#  table(model$pred, dat.test$y)
#  model <- generate.roc(dat.train, dat.test)
#  points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
#}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 40
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
resolution <- 30
nsamples <- 100
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
