{"paragraphs":[{"text":"%pyspark\n\n# PySpark CommonCrawl Topic Modelling\n# Tom V / Paul J - 24/11/2017\n\n# SET THE spark.driver.maxResultSize PROPERTY TO 3G\n\nimport boto\nfrom boto.s3.key import Key\nfrom gzipstream import GzipStreamFile\nfrom pyspark.sql.types import *\nimport warc\nimport ujson as json\nfrom urlparse import urlparse\nfrom langdetect import detect_langs\nimport pycld2 as cld2\n\n#wetlist = sc.textFile(\"s3://commoncrawl/crawl-data/CC-MAIN-2017-04/wet.paths.gz\") # April(?) 2017 Crawl - 57000 files\n# Latest blog/documentation: http://commoncrawl.org/2017/10/october-2017-crawl-archive-now-available/\nwetlist = sc.textFile(\"s3://commoncrawl/crawl-data/CC-MAIN-2017-43/wet.paths.gz\") # October 2017 Crawl - 89100 files (10.58TB)\n\nwetlist.cache()\n\ndef unpack(uri):\n    conn = boto.connect_s3(anon=True, host='s3.amazonaws.com')\n    bucket = conn.get_bucket('commoncrawl')\n    key_ = Key(bucket, uri)\n    file_ = warc.WARCFile(fileobj=GzipStreamFile(key_))\n    return file_\n\ndef detect(x):\n    try:\n        return detect_langs(x)[0].lang # Maybe we can get away with looking at less characters, or do something less expensive?\n    except Exception as e:\n        return None\n        \ndef detect2(x):\n    try:\n        isReliable, textBytesFound, details = cld2.detect(x)\n        return details[0][1]\n    except Exception as e:\n        print(e)\n        return None\n\ndef process_wet(id_, iterator):\n    for uri in iterator:\n        file = unpack(uri)\n        for record in file: # Approx 53k web pages per WET file\n            try:\n                #url = record.rec_headers.get_header('WARC-Target-URI')\n                #yield record, record.content_stream().read().decode('utf-8')\n                url = record.url\n                \n                # TODO: Limit number of bytes read per record e.g. read(200000)\n                \n                domain = None if not url else urlparse(url).netloc\n                text = record.payload.read().decode('utf-8') #.limit(100) # TODO: Limit this read to ensure max length (for improving parallizability)\n                lang = detect2(text[:300]) # Use PyCLD2, not langdetect, which was killing performance!\n                yield domain, url, text, lang\n            except Exception as e:\n                yield e\n                \ndef process_wet_simple(id_, iterator):\n    count=0\n    for uri in iterator:\n        file = unpack(uri)\n        for record in file:\n            try:\n                count=count+1\n                # TODO: Output total size of pages, rather than number of pages\n                # Histogram.\n            except Exception as e:\n                pass\n        #print(count)\n        yield count","dateUpdated":"2017-12-01T12:15:06+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171020-102243_1718178582","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4513"},{"text":"%pyspark\ndetect2(\"this is a test\")","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'en'\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171027-134322_549744379","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4514"},{"text":"%pyspark\n\n# PARAMETER - number of input files\nnfiles = 89100 # Total 89100\n\n# PARAMETER - slices / partitions of input\nfiles = sc.parallelize(wetlist.take(nfiles)) #, numSlices=nfiles/32) # TODO: Try numSlices=nfiles/32 etc, or just default!\n\n# Should parallelize\nprint(files.getNumPartitions())\nrdd=files.mapPartitionsWithIndex(process_wet)\n\nprint(str(rdd))\ndocs = rdd.toDF([\"domain\", \"url\", \"text\",\"lang\"]) #  \"lang\"\n#docs.cache()\n#docs.count() # Total docs in all languages","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"3840\nPythonRDD[4] at RDD at PythonRDD.scala:48\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171020-101220_2022546189","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4515"},{"text":"%pyspark\n\ndocs_en = docs.filter(docs.lang == 'en')\n#docs_en = docs\n\n# PARAMETER - possibly set partitions?\n#docs_en = docs_en.repartition(nfiles)\n#docs_en.rdd.getNumPartitions()\n#docs_en.sample(True,0.01).groupBy('lang').count().toPandas()\n#docs_en.count() # 87,842,898 for 4096 files; 175,615,933 for 8192 files; 238,666,992 for 16384 files.","dateUpdated":"2017-12-01T11:09:59+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{"0":{"graph":{"mode":"table","height":93,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171020-110218_1507019685","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4516"},{"text":"%pyspark\n\nstopwords_english = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn', 'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn', 'com', 'nbsp']\n\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import RegexTokenizer, CountVectorizer, StopWordsRemover\n\n# PARAMETER - regex tokenization\ntokenizer = RegexTokenizer(inputCol=\"text\", outputCol=\"words\", pattern=\"\\\\p{L}{3,}\", gaps=False)\nstopwordRemover = StopWordsRemover(inputCol=\"words\", outputCol=\"filtered\",stopWords=stopwords_english, caseSensitive=False)\n\n# PARAMETER - vocab size, min and max doc frequency\ncv = CountVectorizer(inputCol=\"filtered\", outputCol=\"vec\",vocabSize=40000, minDF=50) # reduced vocabSize from 100k to 20k to save memory\n\n# Run the model fitting and extract vectors\npipeline = Pipeline(stages=[tokenizer, stopwordRemover, cv])\nmodel = pipeline.fit(docs_en)\nvecs = model.transform(docs_en).drop('text').drop('words').drop('filtered')\nvecs.cache()\n#vecs.count()\n\n# Took 42 min 51 sec on m4.16xlarge with 1024 files, approx 2 hours on 5xr4.8xlarge with 4096 files, approx 20 mins on 18xr4.8xlarge with 8192 files.","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 8, in <module>\n  File \"/usr/lib/spark/python/pyspark/ml/base.py\", line 64, in fit\n    return self._fit(dataset)\n  File \"/usr/lib/spark/python/pyspark/ml/pipeline.py\", line 108, in _fit\n    model = stage.fit(dataset)\n  File \"/usr/lib/spark/python/pyspark/ml/base.py\", line 64, in fit\n    return self._fit(dataset)\n  File \"/usr/lib/spark/python/pyspark/ml/wrapper.py\", line 265, in _fit\n    java_model = self._fit_java(dataset)\n  File \"/usr/lib/spark/python/pyspark/ml/wrapper.py\", line 262, in _fit_java\n    return self._java_obj.fit(dataset._jdf)\n  File \"/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 1133, in __call__\n    answer, self.gateway_client, self.target_id, self.name)\n  File \"/usr/lib/spark/python/pyspark/sql/utils.py\", line 63, in deco\n    return f(*a, **kw)\n  File \"/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/protocol.py\", line 319, in get_return_value\n    format(target_id, \".\", name), value)\nPy4JJavaError: An error occurred while calling o139.fit.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 438 in stage 3.0 failed 4 times, most recent failure: Lost task 438.3 in stage 3.0 (TID 2317, ip-172-31-38-12.eu-west-1.compute.internal, executor 29): ExecutorLostFailure (executor 29 exited caused by one of the running tasks) Reason: Container marked as failed: container_1511542482940_0002_01_000125 on host: ip-172-31-38-12.eu-west-1.compute.internal. Exit status: -100. Diagnostics: Container released on a *lost* node\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1690)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1678)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1677)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1677)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:855)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:855)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:855)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1905)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1860)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1849)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:671)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2022)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2043)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2062)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2087)\n\tat org.apache.spark.rdd.RDD.count(RDD.scala:1158)\n\tat org.apache.spark.ml.feature.CountVectorizer.fit(CountVectorizer.scala:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171020-101427_882065123","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4517"},{"text":"%pyspark\nsc.getConf().get('spark.driver.maxResultSize')","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"u'32g'\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171027-153123_778277811","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4518"},{"text":"%pyspark\n#model.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textmodel' % nfiles)\n#vecs.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_english_page_tf_vectors' % nfiles)\nprint(\"# Removed 16/11/17 for speed\")","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"# Removed 16/11/17 for speed\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171027-145239_579746754","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4519"},{"title":"Skip to here to restart from saved vectors","text":"%pyspark\nfrom pyspark.ml.pipeline import PipelineModel\n\n#nfiles = 32768\n#model2 = PipelineModel.load('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textmodel' % nfiles)\n#vecs2 = spark.read.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_english_page_tf_vectors' % nfiles)\n#vecs2.show(10)\nprint(\"# Removed 16/11/17 for speed\")","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"# Removed 16/11/17 for speed\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171027-152148_622560673","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4520"},{"text":"%pyspark\n\n# Run the topic modelling on index pages only\n\nfrom pyspark.ml.clustering import LDA\n#inputCol=\"vec\", outputCol=\"ldaVec\", k=3, optimizer=\"online\"\n\n# Fix java memory errors, perhaps using:\n# spark.driver.memory 256g - DIDN'T WORK\n# or by reducing vocabSize from 100k to 20k - WORKS!\n\n#With 128:\n#    Py4JJavaError: An error occurred while calling o375.fit.\n#: org.apache.spark.SparkException: Job 49 cancelled because SparkContext was shut down\n\n# TODO: Revert back to 3 or 5 iterations?\n# TODO: And 300-500 topics\nlda = LDA(k=100, maxIter=1, featuresCol=\"vec\") # Reduced maxIter from 100 to 50\n\n# Get topic vectors for index pages (estimate of topic vec per domain)\nvecs_index = vecs.filter(\"url LIKE '%index.html'\")\nldaModel = lda.fit(vecs_index)\n\n# 22/11/2017 - increased spark.driver.maxResultSize to 32g then got this error:\n#Py4JJavaError: An error occurred while calling o349.fit.\n#: java.lang.NegativeArraySizeException\n# TODO: Maybe filter vectors prior to fitting?","dateUpdated":"2017-12-01T11:14:36+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'vecs' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1512126599446_-15850148","id":"20171020-101446_892258643","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4521"},{"text":"%pyspark\n\n# Save the models\n#ldaModel.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/ldamodel' % nfiles)\n#pipeline.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textpipeline' % nfiles)\nprint(\"# Removed 16/11/17 for speed\")","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"# Removed 16/11/17 for speed\n"}]},"apps":[],"jobName":"paragraph_1512126599447_-16234897","id":"20171020-124001_1609701105","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4522"},{"text":"%pyspark\n\n# Get topic vectors for index pages (estimate of topic vec per domain)\n#vecs_index = vecs.filter(\"url LIKE '%index.html'\")\nresults = ldaModel.transform(vecs_index)\n\n# Drop text cols\nresults2=results.drop('text').drop('words').drop('filtered')\n\n# Save domain topic vecs\nresults2.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_index_page_topics' % nfiles)","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'ldaModel' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1512126599447_-16234897","id":"20171020-124102_343731757","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4523"},{"text":"%pyspark\n\n# Create a dataset containing just the host, url and top 3 topic labels & scores\nimport pandas as pd\nimport numpy as np\ntopicIndices = ldaModel.describeTopics(maxTermsPerTopic = 5).collect()\nvocab = model.stages[2].vocabulary\n\ntopic_labels = []\nfor i, (topic, terms, termWeights) in enumerate(topicIndices):\n    topwords = pd.Series(dict(zip([vocab[t] for t in terms], termWeights))).sort_values(ascending=False)\n    topic_labels.append('_'.join(topwords.index.values))\n\ntopic_labels = np.array(topic_labels)\n\ndef topTopics(x):\n    labels = topic_labels[np.argsort(x.topicDistribution)[::-1][:3]]\n    scores = np.sort(x.topicDistribution)[::-1][:3]\n    return (x.domain, x.url, str(labels[0]), float(scores[0]), str(labels[1]), float(scores[1]), str(labels[2]), float(scores[2]))\n\nresults3 = results2.rdd.map(topTopics)\nresults3 = results3.toDF([\"host\", \"url\", \"topic1\", \"score1\", \"topic2\", \"score2\", \"topic3\", \"score3\"])\n\nresults3.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_index_page_topic_labels' % nfiles)\nresults3.show()","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1508943116864106949.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'ldaModel' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1512126599447_-16234897","id":"20171020-131815_2006247238","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4524"},{"text":"%pyspark\n\n","dateUpdated":"2017-12-01T11:09:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1512126599447_-16234897","id":"20171020-101912_1610139389","dateCreated":"2017-12-01T11:09:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4525"}],"name":"Tom 1 Topic Modelling","id":"2CZNSVS2J","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}