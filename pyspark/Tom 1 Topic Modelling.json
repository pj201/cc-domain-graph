{"paragraphs":[{"text":"%pyspark\n\n\n\n#SET THE spark.driver.maxResultSize PROPERTY TO 3G\n\n\n\n\n","user":"anonymous","dateUpdated":"2017-10-27T15:39:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509118692185_1772443370","id":"20171027-153812_358671994","dateCreated":"2017-10-27T15:38:12+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5573"},{"text":"%pyspark\n\n# PySpark CommonCrawl Topic Modelling\n# Tom V / Paul J - 25/10/2017\n\nimport boto\nfrom boto.s3.key import Key\nfrom gzipstream import GzipStreamFile\nfrom pyspark.sql.types import *\nimport warc\nimport ujson as json\nfrom urlparse import urlparse\nfrom langdetect import detect_langs\nimport pycld2 as cld2\n\nwetlist = sc.textFile(\"s3://commoncrawl/crawl-data/CC-MAIN-2017-04/wet.paths.gz\")\nwetlist.cache()\n\ndef unpack(uri):\n    conn = boto.connect_s3(anon=True, host='s3.amazonaws.com')\n    bucket = conn.get_bucket('commoncrawl')\n    key_ = Key(bucket, uri)\n    file_ = warc.WARCFile(fileobj=GzipStreamFile(key_))\n    return file_\n\ndef detect(x):\n    try:\n        return detect_langs(x)[0].lang # Maybe we can get away with looking at less characters, or do something less expensive?\n    except Exception as e:\n        return None\n        \ndef detect2(x):\n    try:\n        isReliable, textBytesFound, details = cld2.detect(x)\n        return details[0][1]\n    except Exception as e:\n        print(e)\n        return None\n\ndef process_wet(id_, iterator):\n    for uri in iterator:\n        file = unpack(uri)\n        for record in file: # Approx 53k web pages per WET file\n            try:\n                #url = record.rec_headers.get_header('WARC-Target-URI')\n                #yield record, record.content_stream().read().decode('utf-8')\n                url = record.url\n                domain = None if not url else urlparse(url).netloc\n                text = record.payload.read().decode('utf-8') #.limit(100) # TODO: Limit this read to ensure max length (for improving parallizability)\n                lang = detect2(text[:300]) # TODO: Language detection is what appears to be killing performance!\n                yield domain, url, text, lang\n            except Exception as e:\n                yield e\n                \ndef process_wet_simple(id_, iterator):\n    count=0\n    for uri in iterator:\n        file = unpack(uri)\n        for record in file:\n            try:\n                count=count+1\n                # TODO: Output total size of pages, rather than number of pages\n                # Histogram.\n            except Exception as e:\n                pass\n        #print(count)\n        yield count","user":"anonymous","dateUpdated":"2017-10-27T13:05:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1509107415959_1263995637","id":"20171020-102243_1718178582","dateCreated":"2017-10-27T12:30:15+0000","dateStarted":"2017-10-27T13:05:28+0000","dateFinished":"2017-10-27T13:05:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4455"},{"text":"%pyspark\ndetect2(\"this is a test\")","user":"anonymous","dateUpdated":"2017-10-27T13:43:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'en'\n"}]},"apps":[],"jobName":"paragraph_1509111802942_-974331504","id":"20171027-134322_549744379","dateCreated":"2017-10-27T13:43:22+0000","dateStarted":"2017-10-27T13:43:42+0000","dateFinished":"2017-10-27T13:43:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4456"},{"text":"%pyspark\n\n# PARAMETER - number of input files\nnfiles = 1024\n\n# PARAMETER - slices / partitions of input\nfiles = sc.parallelize(wetlist.take(nfiles), numSlices=nfiles)\n\n# TODO: Make this use more than one CPU!\nprint(files.getNumPartitions())\n#files.mapPartitionsWithIndex(process_wet_simple).collect()\nrdd=files.mapPartitionsWithIndex(process_wet)\n\nprint(str(rdd))\ndocs = rdd.toDF([\"domain\", \"url\", \"text\",\"lang\"]) #  \"lang\"\n#docs.cache()\ndocs.count()","user":"anonymous","dateUpdated":"2017-10-27T13:06:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1024\nPythonRDD[38] at RDD at PythonRDD.scala:48\n54848203\n"}]},"apps":[],"jobName":"paragraph_1509107415962_1262841390","id":"20171020-101220_2022546189","dateCreated":"2017-10-27T12:30:15+0000","dateStarted":"2017-10-27T13:06:02+0000","dateFinished":"2017-10-27T13:10:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4457"},{"text":"%pyspark\n\ndocs_en = docs.filter(docs.lang == 'en')\n#docs_en = docs\n\n# PARAMETER - possibly set partitions?\n#docs_en = docs_en.repartition(nfiles)\n#docs_en.rdd.getNumPartitions()\n#docs_en.sample(True,0.01).groupBy('lang').count().toPandas()\ndocs_en.count()","user":"anonymous","dateUpdated":"2017-10-27T14:02:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"21852216\n"}]},"apps":[],"jobName":"paragraph_1509107415963_1262456642","id":"20171020-110218_1507019685","dateCreated":"2017-10-27T12:30:15+0000","dateStarted":"2017-10-27T14:02:40+0000","dateFinished":"2017-10-27T14:07:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4458"},{"text":"%pyspark\n\nstopwords_english = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn', 'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn']\n\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import RegexTokenizer, CountVectorizer, StopWordsRemover\n\n# PARAMETER - regex tokenization\ntokenizer = RegexTokenizer(inputCol=\"text\", outputCol=\"words\", pattern=\"\\\\p{L}{3,}\", gaps=False)\nstopwordRemover = StopWordsRemover(inputCol=\"words\", outputCol=\"filtered\",stopWords=stopwords_english, caseSensitive=False)\n\n# PARAMETER - vocab size, min and max doc frequency\ncv = CountVectorizer(inputCol=\"filtered\", outputCol=\"vec\",vocabSize=50000, minDF=50) # reduced vocabSize from 100k to 20k to save memory\n\n# TODO: Investigate why this hangs with 256 files\npipeline = Pipeline(stages=[tokenizer, stopwordRemover, cv])\nmodel = pipeline.fit(docs_en)\nvecs = model.transform(docs_en).drop('text').drop('words').drop('filtered')\nvecs.cache()\nvecs.count()\n\n# Took 42 min 51 sec on m4.16xlarge with 1024 files","user":"anonymous","dateUpdated":"2017-10-27T14:56:30+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"21873122\n"}]},"apps":[],"jobName":"paragraph_1509107415963_1260532897","id":"20171020-101427_882065123","dateCreated":"2017-10-27T12:30:15+0000","dateStarted":"2017-10-27T14:09:08+0000","dateFinished":"2017-10-27T14:51:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4459"},{"text":"%pyspark\nsc.getConf().get('spark.driver.maxResultSize')","user":"anonymous","dateUpdated":"2017-10-27T15:34:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"u'3G'\n"}]},"apps":[],"jobName":"paragraph_1509118283114_-1837870098","id":"20171027-153123_778277811","dateCreated":"2017-10-27T15:31:23+0000","dateStarted":"2017-10-27T15:34:43+0000","dateFinished":"2017-10-27T15:35:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4460"},{"text":"%pyspark\nmodel.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textmodel' % nfiles)\n#vecs.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_english_page_tf_vectors' % nfiles)","user":"anonymous","dateUpdated":"2017-10-27T15:26:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1509115959345_732343976","id":"20171027-145239_579746754","dateCreated":"2017-10-27T14:52:39+0000","dateStarted":"2017-10-27T15:26:48+0000","dateFinished":"2017-10-27T15:27:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4461"},{"title":"Skip to here to restart from saved vectors","text":"%pyspark\nfrom pyspark.ml.pipeline import PipelineModel\n\nnfiles = 1024\n\nmodel2 = PipelineModel.load('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textmodel' % nfiles)\nvecs2 = spark.read.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_english_page_tf_vectors' % nfiles)\n\nvecs2.show()","user":"anonymous","dateUpdated":"2017-10-27T15:36:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1509117708328_1755274689","id":"20171027-152148_622560673","dateCreated":"2017-10-27T15:21:48+0000","dateStarted":"2017-10-27T15:35:31+0000","dateFinished":"2017-10-27T15:35:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4462"},{"text":"%pyspark\nvecs2.cache()","user":"anonymous","dateUpdated":"2017-10-27T15:36:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[domain: string, url: string, lang: string, vec: vector]\n"}]},"apps":[],"jobName":"paragraph_1509118138058_1690495144","id":"20171027-152858_769393097","dateCreated":"2017-10-27T15:28:58+0000","dateStarted":"2017-10-27T15:36:24+0000","dateFinished":"2017-10-27T15:36:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4463"},{"text":"%pyspark\n\n#Run the topic modelling\n\nfrom pyspark.ml.clustering import LDA\n#inputCol=\"vec\", outputCol=\"ldaVec\", k=3, optimizer=\"online\"\n\n# Fix java memory errors, perhaps using:\n# spark.driver.memory 256g - DIDN'T WORK\n# or by reducing vocabSize from 100k to 20k - WORKS!\n\n#With 128:\n#    Py4JJavaError: An error occurred while calling o375.fit.\n#: org.apache.spark.SparkException: Job 49 cancelled because SparkContext was shut down\n\nlda = LDA(k=100, maxIter=10, featuresCol=\"vec\") # Reduced maxIter from 100 to 50\nldaModel = lda.fit(vecs2)\n","user":"anonymous","dateUpdated":"2017-10-27T15:36:55+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509107415964_1260532897","id":"20171020-101446_892258643","dateCreated":"2017-10-27T12:30:15+0000","dateStarted":"2017-10-27T15:36:55+0000","dateFinished":"2017-10-27T15:36:45+0000","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:4465","errorMessage":""},{"text":"%pyspark\n\n# Save the models\nldaModel.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/ldamodel' % nfiles)\n#pipeline.save('s3://billsdata.net/CommonCrawl/topic_model_%d_files/textpipeline' % nfiles)","dateUpdated":"2017-10-27T14:52:39+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'ldaModel' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1509107415965_1260148148","id":"20171020-124001_1609701105","dateCreated":"2017-10-27T12:30:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4466"},{"text":"%pyspark\n\n# Get topic vectors for index pages (estimate of topic vec per domain)\n\nvecs_index = vecs.filter(\"url LIKE '%index.html'\")\nresults = ldaModel.transform(vecs_index)\n\n# Drop text cols\nresults2=results.drop('text').drop('words').drop('filtered')\n\n# Save domain topic vecs\nresults2.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_index_page_topics' % nfiles)","dateUpdated":"2017-10-27T12:30:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'ldaModel' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1509107415965_1260148148","id":"20171020-124102_343731757","dateCreated":"2017-10-27T12:30:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4467"},{"text":"%pyspark\n\n# Create a dataset containing just the host, url and top 3 topic labels & scores\n\nimport pandas as pd\nimport numpy as np\ntopicIndices = ldaModel.describeTopics(maxTermsPerTopic = 5).collect()\nvocab = model.stages[2].vocabulary\n\ntopic_labels = []\nfor i, (topic, terms, termWeights) in enumerate(topicIndices):\n    topwords = pd.Series(dict(zip([vocab[t] for t in terms], termWeights))).sort_values(ascending=False)\n    topic_labels.append('_'.join(topwords.index.values))\n\ntopic_labels = np.array(topic_labels)\n\ndef topTopics(x):\n    labels = topic_labels[np.argsort(x.topicDistribution)[::-1][:3]]\n    scores = np.sort(x.topicDistribution)[::-1][:3]\n    return (x.domain, x.url, str(labels[0]), float(scores[0]), str(labels[1]), float(scores[1]), str(labels[2]), float(scores[2]))\n\nresults3 = results2.rdd.map(topTopics)\nresults3 = results3.toDF([\"host\", \"url\", \"topic1\", \"score1\", \"topic2\", \"score2\", \"topic3\", \"score3\"])\n\nresults3.write.parquet('s3://billsdata.net/CommonCrawl/topic_model_%d_files/cc_index_page_topic_labels' % nfiles)\nresults3.show()","dateUpdated":"2017-10-27T12:30:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-756686777497080727.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'ldaModel' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1509107415965_1260148148","id":"20171020-131815_2006247238","dateCreated":"2017-10-27T12:30:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4468"},{"text":"%pyspark\n\n","dateUpdated":"2017-10-27T12:30:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509107415966_1261302395","id":"20171020-101912_1610139389","dateCreated":"2017-10-27T12:30:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4469"}],"name":"Tom 1 Topic Modelling","id":"2CY85AQSZ","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}