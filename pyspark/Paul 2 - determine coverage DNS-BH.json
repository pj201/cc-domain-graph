{"paragraphs":[{"text":"%pyspark\n\n# Zeppelin notebook to deterine coverage of CC domains against the DNS-BH Malware\n# Domain Blocklist from this site: http://mirror1.malwaredomains.com \n# Specifically, the 'justdomains' file, which currently contains 31k 'bad' domains\n# PJ - 21 Sept 2017\n\nimport boto\nfrom pyspark.sql.types import *\n\n# Import the DNS-BH domain list as a DataFrame\nbh_schema=StructType([StructField(\"domain\", StringType(), False)])\ndns_bh=spark.read.csv('s3://billsdata.net/CommonCrawl/DNS-BH/justdomains.dms', header=False, schema=bh_schema)\ndns_bh.show(3)\nprint(\"Bad domains in DNS-BH: \" + str(dns_bh.count()))\ndns_bh.cache()","user":"anonymous","dateUpdated":"2017-09-21T12:11:34+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|              domain|\n+--------------------+\n|amazon.co.uk.secu...|\n|autosegurancabras...|\n|christianmensfell...|\n+--------------------+\nonly showing top 3 rows\n\nBad domains in DNS-BH:31877\nDataFrame[domain: string]\n"}]},"apps":[],"jobName":"paragraph_1505987198561_1396787597","id":"20170921-094638_181835646","dateCreated":"2017-09-21T09:46:38+0000","dateStarted":"2017-09-21T11:17:35+0000","dateFinished":"2017-09-21T11:17:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22393"},{"text":"%pyspark\n\n# Load a list of CC domains, using the host-level web graph produced by CommonSearch in 2016:\n# https://about.commonsearch.org/2016/07/our-first-public-datasets-host-level-webgraph-and-pagerank/\n# TO DO: Maybe we can derive a better list than this ourselves?\n\nschema=StructType([StructField(\"id\", LongType(), False), StructField(\"domain\", StringType(), False)])\n#cc_domains=spark.read.csv('s3://billsdata.net/CommonCrawl/DNS-BH/vertices.txt.gz', header=False, schema=schema)\ncc_domains=spark.read.option(\"header\", \"false\").option(\"inferSchema\", \"true\").option(\"delimiter\", ' ').schema(schema).csv(\"s3://billsdata.net/CommonCrawl/DNS-BH/vertices.txt.gz\")\n#cc_domains=spark.createDataFrame(cc_domains,schema) # apply schema\ncc_domains.show(3)\n","user":"anonymous","dateUpdated":"2017-09-21T10:43:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+\n|                 id|              domain|\n+-------------------+--------------------+\n|8549019527203575649|widgets.lumberjoc...|\n|         -819422369|        babybjorn.it|\n|         1252628295|      albergoelea.it|\n+-------------------+--------------------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1505987215789_2111128386","id":"20170921-094655_116470021","dateCreated":"2017-09-21T09:46:55+0000","dateStarted":"2017-09-21T10:43:51+0000","dateFinished":"2017-09-21T10:43:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22394"},{"text":"%pyspark\n\n# Remove www prefixes and perform other clean-up on both lists\nfrom pyspark.sql.functions import UserDefinedFunction\nfrom pyspark.sql.types import StringType\n\nname='domain'\nprefix=\"www.\"\nudf = UserDefinedFunction(lambda x: (x[len(prefix):] if (x.startswith(prefix) if x else False) else x), StringType())\n\ndns_bh2 = dns_bh.select(*[udf(column).alias(name) if column == name else column for column in dns_bh.columns])\ncc_domains2 = cc_domains.select(*[udf(column).alias(name) if column == name else column for column in cc_domains.columns])\ndns_bh2.show(3)\ncc_domains2.show(3)","user":"anonymous","dateUpdated":"2017-09-21T12:34:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|              domain|\n+--------------------+\n|amazon.co.uk.secu...|\n|autosegurancabras...|\n|christianmensfell...|\n+--------------------+\nonly showing top 3 rows\n\n+-------------------+--------------------+\n|                 id|              domain|\n+-------------------+--------------------+\n|8549019527203575649|widgets.lumberjoc...|\n|         -819422369|        babybjorn.it|\n|         1252628295|      albergoelea.it|\n+-------------------+--------------------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1505988941075_1158746211","id":"20170921-101541_1270698841","dateCreated":"2017-09-21T10:15:41+0000","dateStarted":"2017-09-21T11:46:13+0000","dateFinished":"2017-09-21T11:50:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22395"},{"text":"%pyspark\n\n# Join the two lists of domains, and compute overlap\ncommon_domains=dns_bh.join(cc_domains, [\"domain\"])\ncommon_domains.show(3)\nprint(\"Number of common domains: \" + str(common_domains.count()))\n\n# So we have 3905 common domains (using full domain string)\n# Not great, but probably enough to start training a predictive model -  see 'Paul 3 - ...'\n# TODO: For some reason, the www. filtering in cell above causing Join not to complete - investigate!","user":"anonymous","dateUpdated":"2017-09-21T12:33:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505988960762_-879238065","id":"20170921-101600_2071010238","dateCreated":"2017-09-21T10:16:00+0000","dateStarted":"2017-09-21T12:29:23+0000","dateFinished":"2017-09-21T12:32:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22396","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-----------+\n|              domain|         id|\n+--------------------+-----------+\n|    aeroclubparma.it|-1573485380|\n|higherpositions.info| 1149031776|\n|    artlegendsoc.org| 1509011612|\n+--------------------+-----------+\nonly showing top 3 rows\n\nNumber of common domains: 3905\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2017-09-21T10:44:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1505990668750_809323275","id":"20170921-104428_1852071284","dateCreated":"2017-09-21T10:44:28+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:22397"}],"name":"Paul 2 - determine CC coverage of DNS-BH","id":"2CWAP4F65","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}