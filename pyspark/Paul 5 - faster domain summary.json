{"paragraphs":[{"text":"%pyspark\n\n# Zeppelin notebook to create domain summaries based on the May/Jun/Jul 2017 CommonCrawl graph\n# as per description here: http://commoncrawl.org/2017/08/webgraph-2017-may-june-july/\n# PJ - 7 October 2017\n\nimport boto\nfrom pyspark.sql.types import *\n\nLIMIT=1000000 # TODO - remove temporary limit to run full summaries!\n\n# Import the PLD vertices list as a DataFrame\npld_schema=StructType([StructField(\"ID\", StringType(), False), StructField(\"PLD\", StringType(), False)])\npld_txt=sc.textFile(\"s3://commoncrawl/projects/hyperlinkgraph/cc-main-2017-may-jun-jul/domaingraph/vertices.txt.gz\")\ntemp_pld = pld_txt.map(lambda k: k.split()) # By default, splits on whitespace, which is what we want\npld_df=temp_pld.toDF(pld_schema).limit(LIMIT) #.repartition(4)\npld_df.show(3)\npld_df.cache()\n# Should have 91M domains\n#print(pld_df.count())","dateUpdated":"2017-10-07T09:41:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+\n| ID|    PLD|\n+---+-------+\n|  0|  aaa.a|\n|  1| aaa.aa|\n|  2|aaa.aaa|\n+---+-------+\nonly showing top 3 rows\n\nDataFrame[ID: string, PLD: string]\n"}]},"apps":[],"jobName":"paragraph_1507369243233_1905549188","id":"20170929-081624_672091334","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:360","user":"anonymous","dateFinished":"2017-10-07T09:42:36+0000","dateStarted":"2017-10-07T09:41:59+0000"},{"text":"%pyspark\n\n# Next import the PLD edges as a DataFrame\npld_edges_schema=StructType([StructField(\"src\", LongType(), False), StructField(\"dst\", LongType(), False)])\npld_edges_txt=sc.textFile(\"s3://commoncrawl/projects/hyperlinkgraph/cc-main-2017-may-jun-jul/domaingraph/edges.txt.gz\")\ntemp_edges_pld = pld_edges_txt.map(lambda k: map(int, k.split())) # By default, splits on whitespace, which is what we want\npld_edges_df=temp_edges_pld.toDF(pld_edges_schema).limit(LIMIT*10) #.repartition(8)\npld_edges_df.show(3)\npld_edges_df.cache()","dateUpdated":"2017-10-07T09:41:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+--------+\n|src|     dst|\n+---+--------+\n|  2| 9193244|\n| 20|75600973|\n| 21|46356172|\n+---+--------+\nonly showing top 3 rows\n\nDataFrame[src: bigint, dst: bigint]\n"}]},"apps":[],"jobName":"paragraph_1507369243236_1904394941","id":"20170929-095050_1324183281","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:361","user":"anonymous","dateFinished":"2017-10-07T09:42:36+0000","dateStarted":"2017-10-07T09:42:02+0000"},{"text":"%pyspark\n\n# Load the host-level graph vertices in the same way\nhost_schema=StructType([StructField(\"hostid\", StringType(), False), StructField(\"host\", StringType(), False)])\nhost_txt=sc.textFile(\"s3://commoncrawl/projects/hyperlinkgraph/cc-main-2017-may-jun-jul/hostgraph/vertices.txt.gz\")\ntemp_host = host_txt.map(lambda k: k.split()) # By default, splits on whitespace, which is what we want\nhost_df=temp_host.toDF(host_schema).limit(LIMIT*10).repartition(8)\nhost_df.show(3)\nhost_df.cache()\n# Should have 1.3B hosts\n#print(host_df.count())","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------------------+\n|hostid|                host|\n+------+--------------------+\n|     2|             aaa.aaa|\n|    10|       aaa.aaaa.wwww|\n|    18|aaa.com.espaciola...|\n+------+--------------------+\nonly showing top 3 rows\n\nDataFrame[hostid: string, host: string]\n"}]},"apps":[],"jobName":"paragraph_1507369243236_1904394941","id":"20170929-095310_1201506389","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:362","user":"anonymous","dateFinished":"2017-10-07T09:44:18+0000","dateStarted":"2017-10-07T09:42:36+0000"},{"text":"%pyspark\n\n# Load in all harmonic centrality and page-ranks, and join based on reverse domain name\n# Format: #hc_pos #hc_val #pr_pos #pr_val #host_rev\n#pr_schema=StructType([StructField(\"hc_pos\", StringType(), False), StructField(\"hc_val\", StringType(), False), StructField(\"pr_pos\", StringType(), False), StructField(\"pr_val\", StringType(), False), StructField(\"host_rev\", StringType(), False)])\npr_txt=sc.textFile(\"s3://commoncrawl/projects/hyperlinkgraph/cc-main-2017-may-jun-jul/domaingraph/ranks.txt.gz\")\nheader=pr_txt.first()\npr_txt=pr_txt.filter(lambda x: x!=header)\ntemp_pr = pr_txt.map(lambda k: k.split()) # By default, splits on whitespace, which is what we want\npr_df=temp_pr.toDF(header.split()).withColumnRenamed(\"#host_rev\",\"host_rev\").limit(LIMIT*10) #.repartition(8)\npr_df.show(3)\npr_df.cache()\n#pr_df.count() # Should be 91M","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+-------+-------------------+--------------+\n|#hc_pos| #hc_val|#pr_pos|            #pr_val|      host_rev|\n+-------+--------+-------+-------------------+--------------+\n|      1|24989952|      1| 0.0155264576161686|  com.facebook|\n|      2|22460880|      3|0.00866038900847366|   com.twitter|\n|      3|22097514|      2| 0.0128827315785546|com.googleapis|\n+-------+--------+-------+-------------------+--------------+\nonly showing top 3 rows\n\nDataFrame[#hc_pos: string, #hc_val: string, #pr_pos: string, #pr_val: string, host_rev: string]\n"}]},"apps":[],"jobName":"paragraph_1507369243237_1904010192","id":"20170929-093202_1772383833","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:363","user":"anonymous","dateFinished":"2017-10-07T09:44:19+0000","dateStarted":"2017-10-07T09:42:37+0000"},{"text":"%pyspark\n\n# Debug partitioning of our 4 big dataframes\nsc.getConf().getAll() #.mkString(\"\\n\")\nprint(pld_df.rdd.getNumPartitions())\nprint(pld_edges_df.rdd.getNumPartitions())\nprint(host_df.rdd.getNumPartitions())\npr_df.rdd.getNumPartitions()","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1\n1\n8\n1\n"}]},"apps":[],"jobName":"paragraph_1507369243237_1904010192","id":"20171006-161509_1868852031","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:364","user":"anonymous","dateFinished":"2017-10-07T09:44:19+0000","dateStarted":"2017-10-07T09:44:18+0000"},{"text":"%pyspark #--packages graphframes:graphframes:0.5.0-spark2.1-s_2.11\n\n# We now have everything we need in these four dataframes to create the summaries we need.\n\n# This code can't handle the complete edge lists, and produces this exception:\n# java.lang.IllegalArgumentException: Size exceeds Integer.MAX_VALUE\n#out_degrees_=dict(pld_edges_df.groupBy(\"src\").count().collect())\n#in_degrees=dict(pld_edges_df.groupBy(\"dst\").count().collect())\n#print(out_degrees['846558'])\n#print(in_degrees['846558'])\n\n# Instead, just create RDDs and use lookup()\nout_degrees=pld_edges_df.groupBy(\"src\").count()\nin_degrees=pld_edges_df.groupBy(\"dst\").count()\npld_edges_df.unpersist()\nout_degrees.show(3)\nin_degrees.show(3)\n#print(out_degrees.rdd.lookup(846558))\n#print(in_degrees.rdd.lookup(846558))","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+\n|src|count|\n+---+-----+\n|  2|    1|\n| 20|    1|\n| 21|    2|\n+---+-----+\nonly showing top 3 rows\n\n+--------+-----+\n|     dst|count|\n+--------+-----+\n| 9193244|   11|\n|75600973|   21|\n|46356172|   22|\n+--------+-----+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1507369243238_1905164439","id":"20170929-095727_1596943627","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:365","user":"anonymous","dateFinished":"2017-10-07T09:49:15+0000","dateStarted":"2017-10-07T09:44:19+0000"},{"text":"%pyspark\n\n# Next, we'll construct a local dictionary from of all the PLDS (key is the PLD, value is the ID)\n# This is our truth-table of known PLDs that we'll use when counting hosts\n# This code can't handle the full PLD list and produces this exception:\n# Stack trace: ExitCodeException exitCode=52\n#pld_lookup_table=dict(pld_df.rdd.map(lambda x: (x['PLD'], x['ID'])).collect())\n#print(pld_lookup_table[\"aaa.aaa\"])\n\n# Instead, just create an RDD and use lookup()\n#pld_lookup_table=pld_df.rdd.map(lambda x: (x['PLD'], x['ID']))\n#print(pld_lookup_table.lookup(\"aaa.aaa\"))\n\n# Or let's try creating as a BloomFilter, since we only want to record presence of a PLD\nexpectedNumItems=91000000 \nfpp=0.005\n#pld_bf = pld_df.stat.bloomFilter(\"PLD\", expectedNumItems, fpp) # Doesn't exist in pyspark API!\n#pld_bf.mightContain(\"aaa.aaa\")\nfrom pybloom import BloomFilter\npld_bf = BloomFilter(capacity=expectedNumItems, error_rate=fpp)\nfor row in pld_df.rdd.collect():\n    pld_bf.add(row['PLD'])\n\nprint(\"aaa.aaa\" in pld_bf)\nprint(\"aaa.aaa.bla\" in pld_bf)\n\n# Next, broadcast this map so it's available on all the slave nodes - this seems to break access later!\npld_bf_distrib=sc.broadcast(pld_bf)","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"True\nFalse\n"}]},"apps":[],"jobName":"paragraph_1507369243238_1905164439","id":"20170929-100048_2070118110","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:366","user":"anonymous","dateFinished":"2017-10-07T09:49:47+0000","dateStarted":"2017-10-07T09:44:19+0000"},{"text":"%pyspark\n\n# Returns a Boolean to say whether PLD is a hostname in itself\ndef is_a_pld(hostname):\n    #if hostname in pld_lookup_table:\n    #if pld_lookup_table.filter(lambda a: a == hostname).count()>0:\n    if hostname in pld_bf_distrib.value:\n        return True\n    else:\n        return False\n        \n# Define a function to do the hostname->pld conversion, if the pld exists in our dictionary \ndef convert_hostname(hostname):\n    # Return hostname as-is, if this is already a PLD\n    #if hostname in pld_lookup_table:\n    #if pld_lookup_table.filter(lambda a: a == hostname).count()>0:\n    if hostname in pld_bf_distrib.value:\n        return hostname\n    # Otherwise we're going to have to split it up and test the parts\n    try:\n        parts=hostname.split('.')\n        if (len(parts)>4 and is_a_pld('.'.join(parts[0:4]))):\n            return '.'.join(parts[0:4])\n        if (len(parts)>3 and is_a_pld('.'.join(parts[0:3]))):\n            return '.'.join(parts[0:3])\n        if (len(parts)>2 and is_a_pld('.'.join(parts[0:2]))):\n            return '.'.join(parts[0:2])\n        if (len(parts)>1 and is_a_pld('.'.join(parts[0:1]))):\n            return '.'.join(parts[0:1])\n        return \"ERROR\" # Couldn't find a corresponding PLD - this should never happen!\n    except:\n        return \"ERROR\"\n        \n# Test\nprint(convert_hostname(\"aaa.aaa\"))\nprint(is_a_pld(\"aaa.aaa\"))","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aaa.aaa\nTrue\n"}]},"apps":[],"jobName":"paragraph_1507369243239_1904779690","id":"20171004-091447_4214261","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:367","user":"anonymous","dateFinished":"2017-10-07T09:49:47+0000","dateStarted":"2017-10-07T09:49:15+0000"},{"text":"%pyspark\n\n# Now count the number of hosts per PLD in a scalable way, and create another dictionary\n# Takes 5mins for first 10M rows -> approx 8 hours for all 1.3B rows?\ncount_table=host_df.drop('hostid').rdd.map(lambda x: (convert_hostname(x['host']),1)).reduceByKey(lambda x,y: x+y).collectAsMap() # TODO: CountMin sketch?\nbool_table=host_df.drop('hostid').rdd.map(lambda x: (x['host'], is_a_pld(x['host']))).filter(lambda x: x[1]==True).collectAsMap() # TODO: Do we need this?\nhost_df.unpersist()\nprint(count_table['aaa.aaa'])\nprint(bool_table['aaa.aaa'])\nprint(count_table['ERROR']) # Should be zero once we've loaded all the PLDs!\n\n# TODO: Fix error in collect()\n# java.lang.IllegalArgumentException: Size exceeds Integer.MAX_VALUE\n","dateUpdated":"2017-10-07T09:52:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"6\nTrue\n7180422\n"}]},"apps":[],"jobName":"paragraph_1507369243239_1904779690","id":"20171004-092350_1522843259","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:368","user":"anonymous","dateFinished":"2017-10-07T09:52:34+0000","dateStarted":"2017-10-07T09:49:47+0000"},{"text":"%pyspark\n\nfrom pyspark.sql.types import IntegerType\nfrom pyspark.sql.functions import udf, col, when, lit\n\n# Define a UDF to perform column-based lookup\ndef translate(mapping):\n    def translate_(col):\n        if not mapping.get(col):\n            return 0\n        else:\n            return mapping.get(col)\n    return udf(translate_, IntegerType())\n\n# And a similar function for the Boolean map\ndef translate_bool(mapping):\n    def translate_bool_(col):\n        if not mapping.get(col):\n            return False\n        else:\n            return mapping.get(col)\n    return udf(translate_bool_, BooleanType())\n    \n# Insert our count column back into the host summary dataframe, along with a boolean to say whether the PLD is a host in itself\n# While we're at it, let's add in the in and out-degrees too, and an indicator of whether the site has been crawled.\n#crawled_test=when(col(\"OutDegree\")==0, lit(False)).otherwise(lit(True))\npld_df_joined=pld_df.withColumn('NumHosts', translate(count_table)(\"PLD\"))\\\n                    .withColumn('PLDisHost?', translate_bool(bool_table)(\"PLD\"))\n                    #.withColumn('InDegree', translate(in_degrees)(\"ID\"))\\\n                    #.withColumn('OutDegree', translate(out_degrees)(\"ID\"))\\\n                    #.withColumn('Crawled?', crawled_test)\npld_df.unpersist()\npld_df_joined.sort(\"NumHosts\", ascending=False).show(100)\npld_df_joined.cache()","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------------------+--------+----------+\n|    ID|                 PLD|NumHosts|PLDisHost?|\n+------+--------------------+--------+----------+\n|846558|              au.com|  813989|      true|\n|600347|          at.ibooked|  275515|      true|\n|948740|     au.com.blogspot|  126110|      true|\n|114523|     ar.com.blogspot|   97052|      true|\n|482699|      at.co.blogspot|   29811|      true|\n|723578|            at.radio|   24659|      true|\n|723512|            at.radio|   24659|      true|\n|739424|       at.safedomain|   15202|      true|\n| 69342|               am.do|   10416|      true|\n| 15549|         ae.blogspot|    9702|      true|\n| 50431|               ai.id|    7574|      true|\n|739460|         at.safesite|    7565|      true|\n|865746|   au.com.adelaidebd|    4978|      true|\n|794268|   at.topdestination|    4935|      true|\n|  1426|              ac.goe|    4106|      true|\n|963776|   au.com.brisbanebd|    3983|      true|\n|769111| at.stadtausstellung|    3683|      true|\n|192540|     ar.com.fullblog|    3627|      true|\n| 73298|               am.mm|    3384|      true|\n|327854|        ar.com.t-a-u|    3148|     false|\n|198509|        ar.com.goate|    3079|     false|\n|165587|        ar.com.ehbol|    2983|     false|\n|351200|        ar.com.waxed|    2973|     false|\n|669871|           at.mobapp|    2721|      true|\n|151713|        ar.com.de-ed|    2586|     false|\n|842629|attorney.oilfield...|    2503|      true|\n|343039|        ar.com.unuid|    2389|     false|\n|308300|        ar.com.ruckl|    2387|     false|\n|132542|        ar.com.chous|    2372|     false|\n|692982|           at.opendi|    2367|      true|\n|235552|        ar.com.lauko|    2343|     false|\n|327536|        ar.com.swoos|    2283|     false|\n|349149|        ar.com.visze|    2231|     false|\n|596306|    at.hotelwebseite|    2155|      true|\n|162668|        ar.com.dybex|    2130|     false|\n|352268|        ar.com.widia|    2130|     false|\n|269928|       ar.com.nnteen|    2102|      true|\n| 82254|        ar.com.2sexy|    2101|      true|\n|282995|   ar.com.perfectass|    2101|      true|\n|354979|         ar.com.xttc|    2084|     false|\n|305610|         ar.com.rjfm|    2081|     false|\n|299501|         ar.com.rbbn|    2057|     false|\n|111277|         ar.com.bekn|    2039|     false|\n|302307|         ar.com.reoc|    2024|     false|\n|320901|        ar.com.smmkt|    2013|     false|\n|110900|         ar.com.bddp|    1993|     false|\n|270152|        ar.com.noddl|    1968|     false|\n|340110|        ar.com.tummi|    1968|     false|\n| 98239|      ar.com.anunico|    1956|      true|\n|322353|   ar.com.solostocks|    1947|      true|\n|276073|        ar.com.orrio|    1930|     false|\n|496704|at.cylex-oesterreich|    1842|      true|\n|281578|        ar.com.paxia|    1807|     false|\n|800139|          at.tyre100|    1799|      true|\n| 68693|              am.cms|    1792|      true|\n|259221|        ar.com.missk|    1776|     false|\n|418169|        at.ac.univie|    1771|      true|\n|276867|        ar.com.outvi|    1756|     false|\n| 65544|             am.1905|    1754|      true|\n|972854|au.com.businessfo...|    1747|      true|\n|670795|            at.modoo|    1733|      true|\n|213441|         ar.com.illl|    1695|     false|\n|116514|        ar.com.bp-it|    1691|     false|\n|220021|        ar.com.irmar|    1683|     false|\n| 77376|           am.weblog|    1660|      true|\n|110774|        ar.com.bbede|    1642|     false|\n| 73281|               am.mj|    1626|      true|\n|585428|             at.heim|    1617|      true|\n|585413|             at.heim|    1617|      true|\n|351195|         ar.com.wavi|    1616|     false|\n|678655|          at.mywoman|    1600|      true|\n|347623|        ar.com.vidha|    1585|     false|\n|301857|        ar.com.remaz|    1565|     false|\n|331120| ar.com.tedeartistas|    1559|      true|\n|769140|at.stadtbranchenbuch|    1534|      true|\n|769146|at.stadtbranchenbuch|    1534|      true|\n|315616|        ar.com.serle|    1533|     false|\n|238794|        ar.com.licuo|    1472|      true|\n|204872|         ar.com.hayn|    1468|     false|\n|255455| ar.com.mercadoshops|    1459|      true|\n| 52047|               ai.of|    1445|      true|\n|111651|        ar.com.belor|    1421|     false|\n|116300|        ar.com.bothi|    1389|     false|\n|195824|        ar.com.geads|    1384|      true|\n|135662|      ar.com.clicads|    1379|      true|\n|293592|ar.com.publicargr...|    1377|      true|\n|308619|        ar.com.ruoff|    1370|     false|\n| 83250|        ar.com.a-e-a|    1363|     false|\n|244970|        ar.com.lyros|    1356|     false|\n|818378|          at.webnode|    1347|      true|\n|385848|           asia.6eha|    1344|     false|\n|324057|        ar.com.speis|    1337|     false|\n|293172|         ar.com.psdi|    1323|     false|\n|276548|        ar.com.ostiz|    1322|     false|\n|357313|         ar.com.zonq|    1294|     false|\n|349896|        ar.com.vmnet|    1292|     false|\n|192232|        ar.com.fsgsa|    1248|     false|\n| 75471|       am.schoolsite|    1243|      true|\n| 51928|               ai.nl|    1241|      true|\n|186154|        ar.com.fimct|    1237|     false|\n+------+--------------------+--------+----------+\nonly showing top 100 rows\n\nDataFrame[ID: string, PLD: string, NumHosts: int, PLDisHost?: boolean]\n"}]},"apps":[],"jobName":"paragraph_1507369243240_1902855946","id":"20171004-100819_284908525","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369","user":"anonymous","dateFinished":"2017-10-07T09:53:01+0000","dateStarted":"2017-10-07T09:49:48+0000"},{"text":"%pyspark\n\n# Join with in-degree and out-degree dataframes\npld_df_joined2=pld_df_joined.join(out_degrees, out_degrees.src==pld_df_joined.ID, \"leftOuter\").drop(\"src\").withColumnRenamed(\"count\",\"OutDegree\")\npld_df_joined.unpersist()\npld_df_joined3=pld_df_joined2.join(in_degrees, in_degrees.dst==pld_df_joined2.ID, \"leftOuter\").drop(\"dst\").withColumnRenamed(\"count\",\"InDegree\")\npld_df_joined2.unpersist()\npld_df_joined3.show(5)\npld_df_joined3.cache()","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+--------------------+--------+----------+---------+--------+\n|  ID|                 PLD|NumHosts|PLDisHost?|OutDegree|InDegree|\n+----+--------------------+--------+----------+---------+--------+\n|  26|             abb.nic|       3|      true|        2|    null|\n|  29|abbott.corelabora...|       2|      true|       34|       9|\n| 474|     ac.americancars|       1|      true|     null|    null|\n| 964|              ac.cmt|       1|     false|        1|    null|\n|1677|          ac.insight|       1|      true|        7|    null|\n+----+--------------------+--------+----------+---------+--------+\nonly showing top 5 rows\n\nDataFrame[ID: string, PLD: string, NumHosts: int, PLDisHost?: boolean, OutDegree: bigint, InDegree: bigint]\n"}]},"apps":[],"jobName":"paragraph_1507369243240_1902855946","id":"20171006-152234_1487383953","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:370","user":"anonymous","dateFinished":"2017-10-07T09:55:32+0000","dateStarted":"2017-10-07T09:52:35+0000"},{"text":"%pyspark\n\n# Insert a flag to indicate whether the PLD has been crawled\ncrawled_test=when(col(\"OutDegree\").isNull(), lit(False)).otherwise(lit(True))\npld_df_joined4=pld_df_joined3.withColumn('Crawled?', crawled_test)\npld_df_joined3.unpersist()\npld_df_joined4.show(5)\npld_df_joined4.cache()","dateUpdated":"2017-10-07T09:42:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+--------------------+--------+----------+---------+--------+--------+\n|  ID|                 PLD|NumHosts|PLDisHost?|OutDegree|InDegree|Crawled?|\n+----+--------------------+--------+----------+---------+--------+--------+\n|  26|             abb.nic|       3|      true|        2|    null|    true|\n|  29|abbott.corelabora...|       2|      true|       34|       9|    true|\n| 474|     ac.americancars|       1|      true|     null|    null|   false|\n| 964|              ac.cmt|       1|     false|        1|    null|    true|\n|1677|          ac.insight|       1|      true|        7|    null|    true|\n+----+--------------------+--------+----------+---------+--------+--------+\nonly showing top 5 rows\n\nDataFrame[ID: string, PLD: string, NumHosts: int, PLDisHost?: boolean, OutDegree: bigint, InDegree: bigint, Crawled?: boolean]\n"}]},"apps":[],"jobName":"paragraph_1507369243241_1902471197","id":"20171006-155148_681542412","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:371","user":"anonymous","dateFinished":"2017-10-07T09:58:03+0000","dateStarted":"2017-10-07T09:53:02+0000"},{"text":"%pyspark\n\n# Finally, join with the harmonic centrality and page-rank for each domain\n# Note: could probably speed this up using something like above techniques, or by presorting (but we don't really need to since this is only 91Mx91M)\npld_df_joined5=pld_df_joined4.join(pr_df, pr_df.host_rev==pld_df_joined4.PLD, \"leftOuter\").drop(\"#hc_pos\").drop(\"#pr_pos\").drop(\"host_rev\")\\\n                             .withColumnRenamed(\"#hc_val\",\"HarmonicCentrality\").withColumnRenamed(\"#pr_val\",\"PageRank\")\npld_df_joined4.unpersist()\npld_df_joined5.show(5)\npld_df_joined5.cache()","dateUpdated":"2017-10-07T09:42:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+--------------------+--------+----------+---------+--------+--------+------------------+--------------------+\n|  ID|                 PLD|NumHosts|PLDisHost?|OutDegree|InDegree|Crawled?|HarmonicCentrality|            PageRank|\n+----+--------------------+--------+----------+---------+--------+--------+------------------+--------------------+\n| 120|             abc.web|       1|     false|     null|    null|   false|              null|                null|\n| 311|             ac.8411|       1|     false|     null|       1|   false|              null|                null|\n| 713|              ac.bgc|       1|     false|     null|    null|   false|              null|                null|\n| 871|          ac.casinos|       1|      true|        2|    null|    true|              null|                null|\n|1014|ac.cosmopolitanun...|       1|      true|     null|       1|   false|          12615973|5.85933334251156e-09|\n+----+--------------------+--------+----------+---------+--------+--------+------------------+--------------------+\nonly showing top 5 rows\n\nDataFrame[ID: string, PLD: string, NumHosts: int, PLDisHost?: boolean, OutDegree: bigint, InDegree: bigint, Crawled?: boolean, HarmonicCentrality: string, PageRank: string]\n"}]},"apps":[],"jobName":"paragraph_1507369243241_1902471197","id":"20170929-122540_264490752","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:372","user":"anonymous","dateFinished":"2017-10-07T10:00:40+0000","dateStarted":"2017-10-07T09:55:33+0000"},{"text":"%pyspark\n\n# Save final table to S3 in compressed CSV format, broken into smaller files\noutputURI=\"s3://billsdata.net/CommonCrawl/domain_summaries2/\"\ncodec=\"org.apache.hadoop.io.compress.GzipCodec\"\npld_df_joined5.coalesce(16).write.format('com.databricks.spark.csv').options(header='true', codec=codec).save(outputURI)","dateUpdated":"2017-10-07T10:00:46+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1507369243242_1903625443","id":"20170929-123834_882164555","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:373","user":"anonymous","dateFinished":"2017-10-07T10:03:30+0000","dateStarted":"2017-10-07T10:00:46+0000"},{"text":"%pyspark\n","dateUpdated":"2017-10-07T09:42:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1507369243242_1903625443","id":"20170930-084538_879594277","dateCreated":"2017-10-07T09:40:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:374","user":"anonymous"}],"name":"Paul 5 - faster domain summary","id":"2CXQ4HPQV","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}